#
# Copyright (c) 2023-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

name: Metrics Weekly
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  test-anvill:
    strategy:
      fail-fast: false
      matrix:
        image:
          - { name: "ubuntu", tag: "22.04" }
        llvm: ["17"]
        cxxcommon_version: ["0.6.0"]

    runs-on:
      labels: gha-ubuntu-32
    container:
      image: ghcr.io/lifting-bits/cxx-common/vcpkg-builder-${{ matrix.image.name }}:${{ matrix.image.tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    if: always()

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: extractions/setup-just@69d82fb0233557aec017ef13706851d0694e0f1d # v1.6.0

      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Ghidra
        run: |
          just install-ghidra
          echo "GHIDRA_INSTALL_DIR=$(pwd)/deps/ghidra" >> $GITHUB_ENV

      - name: Build IRENE Ghidra
        run: |
          just install-irene3-ghidra

      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="build"
          rel_source_path="src"
          rel_install_path="install"
          rel_downloads_path="downloads"
          rel_ccache_path="ccache"
          rel_workspace_path="workspace"
          mkdir -p ${rel_build_path} \
                   ${rel_install_path} \
                   ${rel_downloads_path} \
                   ${rel_ccache_path} \
                   ${rel_workspace_path}
          echo "SOURCE=$(pwd)/${rel_source_path}" >> ${GITHUB_OUTPUT}
          echo "REL_SOURCE=${rel_source_path}" >> ${GITHUB_OUTPUT}
          echo "BUILD=$(pwd)/${rel_build_path}" >> ${GITHUB_OUTPUT}
          echo "REL_BUILD=${rel_build_path}" >> ${GITHUB_OUTPUT}
          echo "INSTALL=$(pwd)/${rel_install_path}" >> ${GITHUB_OUTPUT}
          echo "DOWNLOADS=$(pwd)/${rel_downloads_path}" >> ${GITHUB_OUTPUT}
          echo "CCACHE=$(pwd)/${rel_ccache_path}" >> ${GITHUB_OUTPUT}
          echo "WORKSPACE=$(pwd)/${rel_workspace_path}" >> ${GITHUB_OUTPUT}

      - name: Update the cache (downloads)
        uses: actions/cache@v3
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ matrix.cxxcommon_version }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ matrix.cxxcommon_version }}

      - name: Update the cache (ccache)
        uses: actions/cache@v3
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ matrix.cxxcommon_version }}_${{ github.sha }}
          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ matrix.cxxcommon_version }}

      - name: Clone the anvill repository
        uses: actions/checkout@v3
        with:
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill
          repository: "lifting-bits/anvill"
          ref: "patchable-ir-main"
          fetch-depth: 0
          submodules: true

      - name: Setup Git User for Applying Patches
        # See this thread for more details https://github.community/t/github-actions-bot-email-address/17204/5
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Download the cxx-common ${{ matrix.cxxcommon_version}} package
        shell: bash
        id: cxxcommon_installer
        working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
        run: |
          folder_name="vcpkg_${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm-${{ matrix.llvm }}_amd64"
          archive_name="${folder_name}.tar.xz"
          url="https://github.com/lifting-bits/cxx-common/releases/download/v${{ matrix.cxxcommon_version}}/${archive_name}"
          local_path="${{ steps.build_paths.outputs.DOWNLOADS }}/${archive_name}"
          if [[ ! -f "${local_path}" ]] ; then
            echo "Downloading: ${url}"
            curl "${url}" -L -o "${local_path}"
            ls -t ${{ steps.build_paths.outputs.DOWNLOADS }}/vcpkg_* | tail -n +2 | while read archive_file ; do
              rm "${archive_file}"
            done
          fi
          tar xf "${local_path}" \
              -C "${{ steps.build_paths.outputs.INSTALL }}"
          destination_path="${{ steps.build_paths.outputs.INSTALL }}/vcpkg"
          mv "${{ steps.build_paths.outputs.INSTALL }}/${folder_name}" \
             "${destination_path}"
          echo "${destination_path}/installed/x64-linux-rel/tools/llvm-${{matrix.llvm}}" >> $GITHUB_PATH
          echo "PATH=${destination_path}" >> ${GITHUB_OUTPUT}

      - name: Select the build job count
        shell: bash
        id: build_job_count
        run: |
          echo "VALUE=$(($(nproc) + 1))" >> ${GITHUB_OUTPUT}

      - name: Configure remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir remill_build && cd remill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DCMAKE_TOOLCHAIN_FILE="${{ steps.cxxcommon_installer.outputs.PATH }}/scripts/buildsystems/vcpkg.cmake" \
              -DVCPKG_TARGET_TRIPLET="x64-linux-rel" \
              -G Ninja \
              "${{ steps.build_paths.outputs.SOURCE }}/anvill/remill"

      - name: Build remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build remill_build \
                -j ${{ steps.build_job_count.outputs.VALUE }}

      - name: Install remill
        id: remill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/remill
          cmake --build remill_build \
                --target install
          echo "PATH=${DESTDIR}" >> ${GITHUB_OUTPUT}

      - name: Configure anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir anvill_build && cd anvill_build
          cmake \
              -DCMAKE_TOOLCHAIN_FILE="${{ steps.cxxcommon_installer.outputs.PATH }}/scripts/buildsystems/vcpkg.cmake" \
              -DVCPKG_TARGET_TRIPLET="x64-linux-rel" \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -Dremill_DIR:PATH=${{ steps.remill_installer.outputs.PATH }}/usr/local/lib/cmake/remill \
              -Dsleigh_DIR:PATH=${{ steps.remill_installer.outputs.PATH }}/usr/local/lib/cmake/sleigh \
              -DANVILL_ENABLE_TESTS=true \
              -DANVILL_ENABLE_INSTALL=true \
              -G Ninja \
              "${{ steps.build_paths.outputs.SOURCE }}/anvill"

      - name: Build anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake \
              --build anvill_build \
              -j ${{ steps.build_job_count.outputs.VALUE }}

      - name: Install anvill
        id: anvill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/anvill
          cmake --build anvill_build \
                --target install
          echo "PATH=${DESTDIR}" >> ${GITHUB_OUTPUT}

      - name: Run Integration Tests (AMP Challenge Binaries)
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill
        run: |
          python3 -m pip install -r libraries/lifting-tools-ci/requirements.txt
          scripts/test-amp-challenge-bins.sh \
          --ghidra-install-dir $GHIDRA_INSTALL_DIR \
          --decompile-cmd "${{ steps.build_paths.outputs.INSTALL }}/anvill/usr/local/bin/anvill-decompile-spec" \
          --jobs 8
        env:
          TOB_AMP_PASSPHRASE: ${{secrets.TOB_AMP_PASSPHRASE}}

      - name: Tar and Compress logs
        if: failure()
        run: |
          shopt -s globstar
          tar -cf test-errs.tar.xz ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill/amp-challenge-bins/**/std*
        shell: bash

      - name: Upload stderr/stdout logs on error
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: AMP Challenge Binaries logs
          path: test-errs.tar.xz

      - name: Upload anvill ghidra stats
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: anvill-ghidra
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill/amp-challenge-bins/results/binaries/python/stats.json

      - name: Upload anvill decompiler stats
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: anvill-decompile
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill/amp-challenge-bins/results/binaries/decompile/stats.json

      - name: Upload anvill llvm stats
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: anvill-llvm
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill/amp-challenge-bins/results/binaries/decompile/decompile_stats.json

  test-csmith:
    runs-on:
      labels: gha-ubuntu-32
    if: always()

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: extractions/setup-just@69d82fb0233557aec017ef13706851d0694e0f1d # v1.6.0

      - name: Build differential testing container
        run: |
          just build-docker-eval

      - name: Run differential testing
        run: |
          mkdir csmith_out/
          docker run -v $(pwd)/csmith_out/:/csmith_out/ irene3-eval 8 /csmith_out/
        shell: bash

      - name: Fix directory permissions
        if: always()
        run: |
          docker run --rm -v $(pwd)/csmith_out/:/csmith_out/ --entrypoint /bin/chown irene3-eval -R 1000:1000 /csmith_out/
        shell: bash

      - name: Upload differential testing stats
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: irene3-csmith
          path: ./csmith_out

  build-metrics:
    needs: [test-anvill, test-csmith]
    runs-on: ubuntu-22.04
    if: always()

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: Download anvill ghidra stats
        uses: actions/download-artifact@v3
        with:
          name: anvill-ghidra
          path: anvill-ghidra

      - name: Download anvill decompiler stats
        uses: actions/download-artifact@v3
        with:
          name: anvill-decompile
          path: anvill-decompile

      - name: Download anvill llvm stats
        uses: actions/download-artifact@v3
        with:
          name: anvill-llvm
          path: anvill-llvm

      - name: Download irene3 csmith results
        uses: actions/download-artifact@v3
        with:
          name: irene3-csmith
          path: irene3-csmith

      - name: Build metrics
        run: |
          python scripts/build_metrics.py \
              --ghidra-stats anvill-ghidra/stats.json \
              --decompiler-stats anvill-decompile/stats.json \
              --llvm-stats anvill-llvm/decompile_stats.json \
              --csmith-results irene3-csmith/ \
              --output-metrics weekly-metrics.json

      - name: Upload metrics
        uses: actions/upload-artifact@v3
        with:
          name: weekly-metrics
          path: ./weekly-metrics.json
